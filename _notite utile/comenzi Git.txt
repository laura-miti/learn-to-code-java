GIT --VERSION
git --version  - versiunea de Git instalata

GIT CONFIG
git config --global user.name "Laura Mititelu" - setare nume user care face modificarile

git config --global user.email "mititelu_laura@yahoo.com" - setare email user care face modificarile

=> use of --global = git applies it to everything we do in the system
for a certain  project, when you're in the project, if you want to change options, run the same commands, but without --global -> keeps the global settings for everything else

git config --list => see config settings

git config user.name => see settings for user.name

MAN GIT
man git -> see full manual for git in Linux
git-help + section you want (git-help config - for more about config options)
git-help -> see the most used commands in git, in Linux

High Level Commands = Porcelain Commands - used regularly in projects
Lower Level Commands = Plumbing Commands - meant to be used in tools and scripts

GIT --HELP
git --help -> most used commands (porcelain commands), in Windows
in Windows, there is no option to see the full manual https://github.com/swcarpentry/shell-novice/issues/249

git repository aka repo (virtual storage of my project)
each project in Git is refrerenced as a repository.

To initialize the repository -> cd to that project using the command line (Linux)
Windows -> open folder and right click mouse -> Git Bash here
+ (l/w)
GIT INIT 
git init => initializes an empty repository in the current dir
By initializing your project, it added the Git configuration to a .git subdirectory that has marked this project folder and all of its contents to be version controlled. This .git subdirectory is hidden by default, but you can go into that folder by typing cd .git, and then you can use the ls command to provide a list of the files in this folder. This .git directory just contains all of the important get metadata for this new repository.
 Even though we've initialized Git on this project, the contents in these files haven't changed, they've only been added to be version controlled by Git.

GitHub, GitLab, and Bitbucket - most popular code hosting providers -web‑based Git repositories hosting services


GITHUB
The steps to push content to GitHub won't change with these two plans (free and paid), other than the fact that only authorized collaborators that Steve can manage will be able to see his project. 

add a gitignore, which is a way to add files that you don't want version controlled by Git

add a license to your repository. You can learn more about the different licenses you can add by clicking the Information icon next to the drop‑down option. For real projects, these options are probably a good idea to add, as recommended by GitHub. 
Using HTTPS URLs to push or pull changes to or from your repository, GitHub will ask you for your GitHub username and email address for verification. There is also an option to use the SSH URLs to provide access to your Git repository via the SSH Secure protocol. In order to use these SSH URLs, you need to first generate an SSH key pair and then add that public key to your GitHub account in your profile settings. Using SSH URLs to push or pull changes to or from your repository, GitHub will prompt you with a password, and you'll need to enter in your SSH key passphrase 
more details: help.github.com/articles/which-remote-url-should-i-use

GIT REMOTE ADD ORIGIN GIT@GITHUB.COM:IDGIT/DENREPO
GIT PUSH -U ORIGIN MASTER
If you already have a repository, choose to push an existing repository from the command line
git remote add origin git@github.com:idgit/denrepo
git push -u origin master

Create a new repository on the command line
echo "# denumire-repository" >> README.md -- add and create 
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:idgit/denrepo
git push -u origin master

ECHO "# DENUMIRE-REPOSITORY" >> README.MD -- ADD AND CREATE
echo - says that we want to write wired‑brain‑recipes with an H1 HTML header into a new file called README.md. Now, you can really put anything you want into this README file, but by default, GitHub Just includes the name of your repository. 
expl meu echo "#ExercitiiJavaOCP8" >> README.md

Windows Din GUI Bash / Linux - Terminal in directorul respectiv!!
LS
ECHO
GIT INIT 
GIT CONFIG
etc.

git add . => punctul adauga toate fisierele din directorul curent la staging area

daca da eroarea: does not have a commit checked out 
fatal: adding files failed
inseamna ca sunt repositories in calea curenta


if the current folder name is project_folder, is this how we remove git from the current folder? rm -r project_folder/.git - nu funct
If you really want to remove all of the repository, leaving only the working directory then it should be as simple as this.: rm -rf .git

GIT COMMIT -M "FIRST COMMIT"
git commit -m "first commit"
And now that these files have been added, we can now make a commit with a message that says first commit. We can do this by typing git commit ‑m for message, and then in parentheses, first commit. Git then responds back with some interesting information, and it can tell us on what we just did. 

GIT REMOTE ADD ORIGIN HTTPS://GITHUB.COM/LAURA-MITI/LEARN-TO-CODE-JAVA.GIT

git remote add origin https://github.com/laura-miti/learn-to-code-java.git -> https din linkul de pe github (quick setup)
We then need to connect our local repository to the one we just created on GitHub by linking the two repositories with a git command. This can be done with the remote add origin and then the HTTPS URL that we just copied. This command adds the origin GitHub repository to our local repository by creating a link that allows us to push and pull changes between the two

GIT PUSH -U ORIGIN MASTER

CLEAR
clear - curata istoricul din Terminal/GUI Bash
This clears out our window and moves our command prompt to the top of the screen. Now, we didn't erase this command history. We can always scroll back up to view our previous commands. 

git push -u origin master = to push our committed changes to the origin master by typing git push -u origin master. Remember, the origin is the repository version that sits in our GitHub profile. master - branch-ul local!!

GIT STATUS - arata status
exemplu de mesaj returnat: check the status of your project at any time by using the git status command. If we type git status in our command line, Git will respond back with a few lines of information. 
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

git status - check the status of your project at any time by using the git status command. If we type git status in our command line, Git will respond back with a few lines of information. 
The git status command is a simple but important command because it shows us the state of our project at this particular point in time. 

When we created the repository - Git created the master branch automatically
A branch in Git is a lightweight, movable pointer to your project at a specific point in time. 
This default branch that was created is called the master branch. 
When you make changes in Git, you make them on a specific branch. Now branching is a core concept in Git and a feature that adds a lot of value by allowing many different types of workflows that can involve many different types of branches. 

. Each file in our project can be in one of two states. It can be tracked or untracked by Git.
Untracked means that Git sees a new file that didn't exist in our last commit snapshot.  Git won't track anything unless we explicitly tell it to do so, but Git does provide us with some helpful information on how to add this untracked file when we run git status
Tracked files are ones that were in the previous Git snapshot. 
Tracked files can be in one of three states: 
-committed, which are unmodified changes from the last snapshot; 
-modified, which are files that we've added changes to; 
-and then staged, which are files that we've marked to be added to our next commit snapshot. 
When we make a change to our committed or unmodified file, it moves from a committed stage and into the modified stage. 
When we're satisfied with our changes and we want to stage them for commit, we add them to our staging area.
We then take the changes in the staged area and commit them to our repository. These changes are now saved in our repository in that commit snapshot and they are then moved back to the committed stage

touch vendors.txt - creeaza un fisier gol vendors.txt

git add vendors.txt - adds the untracked file to changes to be committed

git add "denumire si cale cu spatii" => pentru orice comenzi cu spatiu pun ""

Noticed that employees.txt is now showing as staged and ready to be committed, as well as showing as modified changes not yet staged. Now this may seem a little confusing. I mean, how can a file be in two states at the same time? Well, the answer is how and when Git stages a file. When we first staged our employees.txt file by using the git add command, those changes were added at that point in time to be staged. When we fixed the phone number and then resaved the file, Git sees this as a new change that was not added when we previously staged that file. If we committed the files in our staged area right now, the version of employees.txt when we added it to the staging area, is what will be committed into the snapshot. This will not include the fix we just made, since we haven't added that change to be included into our next commit snapshot by staging it with the git add command. 

If you change a file after you run git add and you want those changes to be included in your next commit snapshot, you have to run git add again on that file to add those changes to be staged. 

"git status -s" echiv cu "git status --short"
The key to understanding the short status response is knowing what the letters in front of the files mean and their placement. After running this command, Git will place the name of the files in the far‑right column. There is then a middle column and a far‑left column. The far‑left column indicates that the file has been staged, and the middle column indicates that the file has been modified but remains in the working directory. The letter M means modified, and the letter A means new files that have been added to the staging area, and two question marks mean that there is a new file that is untracked by Git
GitBash: M/A green, M - red - modified from recent add to stage area, 
can be both A and M : A M tralala.txt => A - newly added to staged area, M - modified since it was added to staged area

GIT DIFF

git diff command
. If the git status command is too vague and you want to see the actual changes being made in these files and not just know which files have been changed, you can use the git diff command
. You can use git diff to answer two questions, what changes have I staged that are ready to be committed, and what changes have I made but not staged? 

git diff --staged - This command compares our staged changes to our last commit snapshot
When we run git diff ‑‑staged, we're going to see an interesting detailed response. So let's go over how to read this output. The first thing we see are the compared file versions. Git diff is comparing file a with file b. Now in almost every case, file a and file b will be the same file but just in different snapshot versions. This is shown with diff ‑‑git and then file a, followed by file b. The next line is the file metadata. Now this is technical information of our files. The first two numbers are the hashes or IDs of the two file versions that are being compared. As we were briefly introduced to SHA‑1 hashes in a previous module, Git identifies a file object at a specific version by using these SHA‑1 hashes. The last number is most likely going to be 100644. Now, this is just a internal file mode identifier that represents a normal file. Now there are other number identifiers, but diving into this metadata information is more advanced Git knowledge that won't be covered in detail in this course. Again, for now, just know that it's there and the basics of what it is. Next, we see the change markers for file a and b. File version a is assigned with the minus symbol, and file version b is assigned with the plus symbol. Next, there is the diff chunk, which is made up of two parts, the chunk header and the chunk changes. At the top of this chunk is the chunk header, and the header is enclosed with two @ symbols on each side and will tell you which lines were changed in the file versions. File a is represented with a minus sign, and file b is represented with a plus sign. In this example, the ‑12 is saying that the minus sign, again, being file a, begins at line 12 and then has 2 lines that were modified. The +12 is saying that the plus sign, being file b, also begins at line 12 and then has 3 lines modified. After the chunk header, we have the chunk changes that contain the actual line changes. Now this often includes a few lines of unchanged lines before or after the changes to help provide context of where these changes are being made in the files. These changes will either have a minus or a plus sign in front of the change to show you what version that change is occurring in. However, for files with only one or two lines of content, these extra lines may not show up.
By running the git dif ‑‑staged command, we see that the compared a and b version files is employees.txt. Next, we have the metadata with these file version hashes and the file mode identifier, which is the id for a normal file. We then see the change markers for the two file versions of employees.txt, with the minus being the last committed snapshot version and the plus being the new changes that are in our stage state. We then see the chunk header that shows us the line changes being made in these files, and then we see the chunk changes where we actually see what is being changed. Now, we also see another compared a and b version files, but unlike the employees.txt file comparison, this file a and file b comparison is with different files. File a is employees.txt, and file b is vendors.txt. Below, we see some interesting information that says, similarity index 100%, copy from employees.txt, and copy to vendors.txt. So what's going on here? Well, the reason for this is how Git thinks about filed changes Now, Git doesn't care what the name of the files are. Git really only cares about the content inside of those files. Now, we added a new vendors.txt file that is currently an empty file, and the other file in our staging area is the employees.txt, which was also an empty file before we added some content to it by adding the new employees information. Now, Git sees this similarity and thinks that we just copied the employees.txt file and then renamed it to vendors.txt. The similarity index is the percentage of unchanged files. Well, and since these two file versions are the same, the similarity index is 100%, so Git thinks it's the same file. Now, since this is not the case, we can get around this by explicitly telling Git that this is not a renamed file, but it is in fact a different file. And to show us the Git log as it should be, we can see the correct dif information by again typing get dif ‑‑staged. But this time, let's add the ‑‑no‑renames option. We now see the compared a and b version files for vendors.txt and some similar formatted information that was in our employees.txt version differences. Git tells us that this is a new file with the normal file identifier, and then we see the file metadata. Notice that the first hash reference is a hash of 0s. Because this is a new file, Git wasn't previously tracking this file so there is no hash reference to compare it with. The second hash, which is e69de29, is the new hash for the contents inside vendors.txt. But just a second, the vendors.txt file is empty. There isn't any content in this file. Since Git is now tracking this file, Git needs to create a hash of contents from the file. Even if the file contents are empty, creating a hash on an empty file responds back with the hash reference of e69de29. Remember, Git only cares about the hash reference of a file to keep track of its content. Since the vendors.txt file has a hash of e69de29 and the beginning file version of employees.txt before the added employee change, being file a, also has the same hash reference of e69de29. This is why Git thought we just copied and renamed the file. Now, the git diff ‑‑staged shows us the information on changes that are staged.

TYPE Q TO EXIT ANY GIT DIFF OR GIT STATUS COMMAND THAT RUNS MULTIPLE SCREENS - EXITING LISTIM MODE

git diff --staged +filename => shows the diffs in that file

git diff

open -a atom + filename - opens => Opens Atom in Linux to edit a file

GIT COMMIT -A -M "COMMIT AND ADD AT THE SAME TIME"

You can use git add . then git commit  
OR
You can use git commit - a => adds and commits at the same time.
git commit -a -m "Commit and add at the same time"
Git provides the branch we made the commit on, which in our situation, is the master branch. We then see the SHA‑1 hash from the commit, as well as the commit message that we provided. We then see the number of files that we changed and some stats on how many insertions and/or deletions that were made in these files for this commit. If a new file was added with this commit, Git shows us that too on the next line that says create mode 100644, which is saying a normal file was created, and then the name of the new file, vendors.txt.

Notice that we don't have to push our commit to our project at 'origin/master' every time we make a commit. Now we can continue to make commits to our local project as much as we want. And then when our local project is at a point where we want to send our changes to our origin project, we need to push our local project upstream. We can send our changes to our origin project by using the git push command and then our remote name, which is origin, and then the branch name we want to push up to, which in this case, is master.


GIT LOG
git log -way to view our existing commit history . by default, the git log command lists the commits made to our project in reverse chronological order, being the most recent commits will show up first.
this is a quick way to have a high‑level overview of our previous commits and know who made each commit, when a commit was created, and what that commit was changing
has many options

git log and then the number we want to limit the log to -> limit the number of commits shown in the log
git log -1 => shows only the lateste commit
git log -2 => last 2 commits
log output returns the commits in reverse chronological order

git log --oneline - shows only summary of each commitEach line in the response is a commit, and it has the commit message, as well as a few digits of the SHA-1 hash of that commit. This is a great way to see a simplified, high‑level overview of all the commits in our project history

git log --stat => get a detailed view of each of our commits. output the same as if we just use git log, but now with the addition of the files changed in each commit

git log --patch => the full diff of the exact changes in each file with each commit. This is similar to the results that we got back when using the git diff command. But instead of doing it on changes in our staging area, we can go back to any commit in our project's history using git log and see this detailed view. We can navigate these changes using the up and down arrow keys. And when finished, we can type Q for quit

Many options when viewing the commit log. We can search for author, date range, or even for certain commit messages

GIT COMMIT -m
Git Messages
If the commit message isn't detailed enough, life for every contributor on the project can get pretty frustrating. So, for this reason, there are some general rules and guidelines when writing a commit message.
Read: https://chris.beams.io/posts/git-commit/ 
Chris goes on to list the seven rules of a great commit message. 
First, to separate the subject line from the body with a blank line. Now up to this point our commit messages have only been a one‑line message written from our command line, and they didn't include a body. A lot of commits don't require both a subject and a body. Sometimes a single line is sufficient for the changes being made. For example, add a new ingredient to coconut oil coffee recipe. A change like this may not need a body in the commit message. In addition, adding a commit message with the body is best done using a text editor to write the message rather than using the -m option in the command line. 
Second, limit the subject line to 50 characters. The commit message should be short and to the point. If it's too long, it can be a tedious process to filter through lines and lines of messages to find exactly what you're looking for. 
And third, capitalize the subject line. 
And fourth, do not end the subject line with a period. 
Fifth, use the imperative mood in the subject line. 
Sixth, wrap the body to about 72 characters. Remember, this is the body, not the subject line.
And seventh, use the body to explain the what and why versus the how. This one ties in a little bit with the first rule. If your commit needs an explanation on what is going on, the body is used to explain the what and the why. 
Remember, when you're writing a commit message, it's important to keep in mind that you're writing the message for other people to read and understand what is going on. The better the explanation, the easier it will be to navigate through the git log and the more transparent the log will be. 

GIT RM
git rm "filename.extension" - to remove a file in our project, we need to tell Git to stop tracking the file
git rm "tralala.txt"
ls - arata ca nu mai urmareste fisierul respectiv
git status - arata ca am sters tralala.txt
git rm --cached "vendors.txt" - untrack the files, but keep it around

GIT MV
git mv oldname newname - rename a file old name -> new name
git mv "notite Spring Fundamentals Pluralsight.txt" "notite Spring Fundamentals Pluralsight-setari initiale.txt" - rename a file old name -> new name


BRANCHES

HEAD which is where we are currently pointing at on our project
Now a branch in Git is simply a lightweight, movable pointer to a commit made in a project. A commit needs to be made on a branch, but you have full flexibility on telling Git what branch to make that commit on. 

GIT CHECKOUT -B NEW_BRANCH
git checkout -b new_branch => creates a new branch and checks out to it at the same time
Notice now that a new pointer has been created called new_branch
The git checkout command lets you check out to a different branch
-b option is telling Git that we want to create a new branch and then check out to it. 
our new_branch, master, and HEAD all point to the same commit in our project, but that our HEAD pointer is now under new_branch and no longer directly under master. This is because we have checked out to our new_branch, and we are no longer in our master branch. HEAD is just a pointer to our current state on the branch we are on.

git checkout master => checkout back to our master branch 
The other commits stay on our new_branch, even if we've checked out to a different branch. 
When on master, new changes will be made to master and will not be included in the new_branch created

git checkout new_branch -> move the work to new_branch, head moves accordingly
new commits -> work continues from where we left, but only on that branch. won't affect anything on master
Branching off of master allows us to create a parallel environment where we can try out new ideas and make changes without affecting the master branch. And this is huge when trying out new ideas or working with multiple collaborators. 

git branch branch_name  =>create a branch, but not check out to it at that moment
When we removed and renamed these files on our master branch, they remained in our staging area. We didn't commit these changes yet to a branch. And since we created a new branch off of master at this point in time, the changes in the staging area remained
git status -> shows which branch you are checked out to
git checkout master -> return to master
an error saying, The following untracked working tree files would be overwritten by checkout. Please move or remove them before checkout. Now, since we untracked our file with git rm ‑‑cached, we deleted the version control cache, but did not remove or delete it from our file system. 

Now, we can remove it, or we can add it back in to be tracked. But Steve doesn't quite want to get rid of this file, but he doesn't want to add it right now to be included in his local project. So Git provides us with an option to stash this change. 
git add .
git stash -> saved working directory and index state WIP on new branch
git stash list - > Git provides us with a list of work‑in‑progress changes that we've stashed along with the branch and some commit data
git stash show -> better detailed view of what file was stashed in a high‑level overview of the changes
git stash pop -> reverts stashed files in working directory

ATTENTION: not the file on which you are currently working!

MERGING BRANCHES
branching lets you work on content without affecting the master branch, sort of like working in a test sandbox environment
But what if we now want to incorporate the changes from our new branch into master? Well, this is a pretty common step. It wouldn't make much sense to create a separate branch if we never intended to incorporate those changes back into our production‑ready master branch
This brings up a tool called Vim where we need to add our merge commit message, similar to a regular commit. Now we won't be going over Vim in detail, but we can add our message by typing I to enter the interactive mode and then writing our merge commit message, which in our case, we'll just leave it as it already is. And then when done, hitting the escape key, followed by :wq. The w saves our changes, and the q quits Vim. 

GIT MERGE BRANCH_NAME
we're already checked out to master, we can type git merge and then the name of the branch we want to merge into.So, in our case, we want to merge new branch into the master branch. . We now see that our head is still on master, but a new merge commit was created that is pointing to both branch paths. Our local master branch now has the changes that were made in our new branch

This brings up a tool called Vim where we need to add our merge commit message, similar to a regular commit. Now we won't be going over Vim in detail, but we can add our message by typing I to enter the interactive mode and then writing our merge commit message, which in our case, we'll just leave it as it already is. And then when done, hitting the escape key, followed by :wq. The w saves our changes, and the q quits Vim. 
VIM - appears when you put git commit -a and without -m for message

GIT RESET
Git reset allows us to move commits from history back into our working or staging area. It can also be used to throw changes away. Now, this can be a destructive command, so careful consideration is highly recommended when using reset. Since we're changing our Git history with reset, it's best practice not to reset changes once we've pushed our commits to a remote origin where other collaborators could have accessed the changes

there are three different options when using git reset that will decide what happens to the commits that you want to alter. 
git reset --soft. This reset command will move this specific commit or commits back into your staging area. This is helpful if you want to regroup these changes into different commits or add more changes before committing. 
git reset --mixed or just git reset. This is the default reset option if something else isn't already specified. This reset command is similar to --soft, but instead of moving the changes to the staging area, it moves the changes back to the working directory. 
And the last option is git reset ‑‑hard. Now this option moves the changes to the trash. This could be helpful if you've messed around with making changes and then you decided you didn't want to keep anything and just start over. But be careful when using this command. If you already have changes in your staging or working directory and you decide to run git reset ‑‑hard, those changes will also be deleted. 

GIT PULL from Remote Origin

Let's now push our local master branch to origin master by typing git push origin master. Our origin master is now up to date with the changes we've made locally. Nice. Now that Steve's made the changes he wants and has pushed them up to origin master on GitHub, the next thing he wants to do is to pull down those changes to his other computers so that he can work on this project using his work and personal computers. We can do this by returning back to Steve's GitHub profile where Steve's repository is located. If we navigate to the Repositories tab and click on Steve's wired‑brain‑recipes project, we see a list of files and content inside of the project. In order for Steve to clone this repository down to another computer, you can click on the green Clone or download drop‑down menu button located toward the top right of the page. We can copy this HTTPS link by clicking on the Copy to clipboard icon next to the web URL. Now that we've copied the URL, we can open up the command prompt to clone the project down. So, let's jump back over one last time to our command prompt. Now, Steve can clone down this project to his other computer simply by navigating to the directory he wants to store the project in an
d then cloning the project into that directory. So let's navigate out of our cafe_recipes folder by typing cd .. to go back one directory. Steve can now clone down his repository by typing git clone and then the URL that we copied. 
git clone https://github.com/laura-miti/learn-to-code-java.git
GIT CLONE https://github.com/laura-miti/learn-to-code-java.git
We see that Git has cloned the wired‑brain‑recipes project into the same directory name. So let's cd into that new directory by typing cd wired‑brain‑recipes. We can now type git status to see that we are up to date with the origin master and then typing the ls command shows us the full list of files in our project that were pulled down from origin master. Now, Steve can follow these same simple steps to clone down his project to his other computers that he needs to to work on this project.
